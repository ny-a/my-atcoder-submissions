#include <algorithm>
#include <atcoder/all>
#include <bitset>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <deque>
#include <fstream>
#include <functional>
#include <iostream>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>

struct input {
    template <class T> operator T() {
        T t;
        std::cin >> t;
        return t;
    }
};

void solve(long long N, long long M, std::vector<long long> a, std::vector<long long> b, std::vector<long long> c, std::vector<long long> d) {

    for (int i = 0; i < N; i++) {
        long long minimum_distance = -1;
        long long index = -1;
        long long x1 = a[i];
        long long y1 = b[i];
        for (int j = 0; j < M; j++) {
            long long x2 = c[j];
            long long y2 = d[j];
            long long distance = std::abs(x1 - x2) + std::abs(y1 - y2);
            if (minimum_distance == -1 || distance < minimum_distance) {
                minimum_distance = distance;
                index = j;
            }
        }

        std::cout << index + 1 << "\n";
    }
}

// Generated by 2.5.0 https://github.com/kyuridenamida/atcoder-tools
int main() {
    long long N;
    N = input();
    long long M;
    M = input();
    std::vector<long long> a(N);
    std::vector<long long> b(N);
    for(int i = 0 ; i < N ; i++){
        a[i] = input();
        b[i] = input();
    }
    std::vector<long long> c(M);
    std::vector<long long> d(M);
    for(int i = 0 ; i < M ; i++){
        c[i] = input();
        d[i] = input();
    }
    solve(N, M, std::move(a), std::move(b), std::move(c), std::move(d));
    return 0;
}

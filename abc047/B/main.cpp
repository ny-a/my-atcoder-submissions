#include <algorithm>
#include <atcoder/all>
#include <bitset>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <deque>
#include <fstream>
#include <functional>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>

struct input {
    template <class T> operator T() {
        T t;
        std::cin >> t;
        return t;
    }
};

void solve(long long W, long long H, long long N, std::vector<long long> x, std::vector<long long> y, std::vector<long long> a) {
    std::vector<long long> rect(4, 0LL);
    rect[0] = 0;
    rect[1] = W;
    rect[2] = 0;
    rect[3] = H;

    for (long long i = 0; i < N; i++) {
        long long type = a[i] - 1;

        switch (type) {
            case 0:
                rect[0] = std::max(rect[0], x[i]);
                break;
            case 1:
                rect[1] = std::min(rect[1], x[i]);
                break;
            case 2:
                rect[2] = std::max(rect[2], y[i]);
                break;
            case 3:
                rect[3] = std::min(rect[3], y[i]);
                break;
        }
    }

    long long answer = std::max(0LL, rect[1] - rect[0]) * std::max(0LL, rect[3] - rect[2]);

    std::cout << answer << std::endl;
}

// Generated by 2.5.0 https://github.com/kyuridenamida/atcoder-tools
int main() {
    long long W;
    W = input();
    long long H;
    H = input();
    long long N;
    N = input();
    std::vector<long long> x(N);
    std::vector<long long> y(N);
    std::vector<long long> a(N);
    for(int i = 0 ; i < N ; i++){
        x[i] = input();
        y[i] = input();
        a[i] = input();
    }
    solve(W, H, N, std::move(x), std::move(y), std::move(a));
    return 0;
}

#include <algorithm>
#include <atcoder/all>
#include <bitset>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <deque>
#include <fstream>
#include <functional>
#include <iostream>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>

struct input {
    template <class T> operator T() {
        T t;
        std::cin >> t;
        return t;
    }
};

void solve(long long N, std::vector<long long> T, long long M, std::vector<long long> P, std::vector<long long> X) {
    long long sum = std::accumulate(T.begin(), T.end(), 0LL);
    for (long long i = 0; i < M; i++) {
        long long index = P[i] - 1;
        long long answer = sum - T[index] + X[i];
        std::cout << answer << "\n";
    }
}

// Generated by 2.5.0 https://github.com/kyuridenamida/atcoder-tools
int main() {
    long long N;
    N = input();
    std::vector<long long> T(N);
    for (int i = 0; i < N; i++) {
        T[i] = input();
    }
    long long M;
    M = input();
    std::vector<long long> P(M);
    std::vector<long long> X(M);
    for (int i = 0; i < M; i++) {
        P[i] = input();
        X[i] = input();
    }
    solve(N, std::move(T), M, std::move(P), std::move(X));
    return 0;
}

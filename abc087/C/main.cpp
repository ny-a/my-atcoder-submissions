#include <algorithm>
#include <atcoder/all>
#include <bitset>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <deque>
#include <fstream>
#include <functional>
#include <iostream>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>

struct input {
    template <class T> operator T() {
        T t;
        std::cin >> t;
        return t;
    }
};

void solve(long long N, std::vector<std::vector<long long>> A) {
    long long answer = 0;

    for (int i = 0; i < N; i++) {
        long long acc = 0;
        for (int j = 0; j < N; j++) {
            if (j <= i) {
                acc += A[0][j];
            }
            if (i <= j) {
                acc += A[1][j];
            }
        }
        if (answer < acc) {
            answer = acc;
        }
    }
    std::cout << answer << std::endl;
}

// Generated by 2.5.0 https://github.com/kyuridenamida/atcoder-tools
int main() {
    long long N;
    N = input();
    std::vector<std::vector<long long>> A(2, std::vector<long long>(N));
    for(int i = 0 ; i < 2 ; i++){
        for(int j = 0 ; j < N ; j++){
            A[i][j] = input();
        }
    }
    solve(N, std::move(A));
    return 0;
}

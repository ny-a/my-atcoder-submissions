#include <algorithm>
#include <atcoder/all>
#include <bitset>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <deque>
#include <fstream>
#include <functional>
#include <iostream>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>

struct input {
    template <class T> operator T() {
        T t;
        std::cin >> t;
        return t;
    }
};

void solve(long long N, long long M, std::vector<long long> a, std::vector<long long> b) {
    std::vector<int> cities(N, 0);
    for (long long i = 0; i < M; i++) {
        cities[a[i] - 1]++;
        cities[b[i] - 1]++;
    }

    for (auto const& city: cities) {
        std::cout << city << std::endl;
    }
}

// Generated by 2.5.0 https://github.com/kyuridenamida/atcoder-tools
int main() {
    long long N;
    N = input();
    long long M;
    M = input();
    std::vector<long long> a(M);
    std::vector<long long> b(M);
    for(int i = 0 ; i < M ; i++){
        a[i] = input();
        b[i] = input();
    }
    solve(N, M, std::move(a), std::move(b));
    return 0;
}

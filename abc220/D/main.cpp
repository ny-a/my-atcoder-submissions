#include <algorithm>
#include <atcoder/all>
#include <bitset>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <deque>
#include <fstream>
#include <functional>
#include <iostream>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>

struct input {
    template <class T> operator T() {
        T t;
        std::cin >> t;
        return t;
    }
};

const long long MOD = 998244353;
using mint = atcoder::modint998244353;

void solve(long long N, std::vector<long long> A) {
    std::vector<std::vector<mint>> dp(100005, std::vector(10, mint(0)));

    dp[0][(A[0] + A[1]) % 10]++;
    dp[0][((A[0] * A[1]) % 10)]++;

    for (int i = 1; i < N - 1; i++) {
        for (int j = 0; j < 10; j++) {
            dp[i][(j + A[i+1]) % 10] += dp[i - 1][j];
            dp[i][(j * A[i+1]) % 10] += dp[i - 1][j];
        }
    }

    for (int j = 0; j < 10; j++) {
        std::cout << dp[N - 2][j].val() << std::endl;
    }
}

// Generated by 2.5.0 https://github.com/kyuridenamida/atcoder-tools
int main() {
    long long N;
    N = input();
    std::vector<long long> A(N);
    for(int i = 0 ; i < N ; i++){
        A[i] = input();
    }
    solve(N, std::move(A));
    return 0;
}

#include <algorithm>
#include <atcoder/all>
#include <bitset>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <deque>
#include <fstream>
#include <functional>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>

struct input {
    template <class T> operator T() {
        T t;
        std::cin >> t;
        return t;
    }
};

const std::string YES = "Yes";

const std::string NO = "No";

void solve(long long N, long long M, std::vector<std::string> A, std::vector<std::string> B) {
    bool answer = false;
    long long limit = N - M + 1;

    for (long long start_i = 0; !answer && start_i < limit; start_i++) {
        for (long long start_j = 0; !answer && start_j < limit; start_j++) {
            bool local_answer = true;
            for (long long i = 0; local_answer && i < M; i++) {
                for (long long j = 0; local_answer && j < M; j++) {
                    if (A[start_i + i][start_j + j] != B[i][j]) {
                        local_answer = false;
                    }
                }
            }
            if (local_answer) {
                answer = true;
            }
        }
    }

    std::cout << (answer ? YES : NO) << std::endl;
}

// Generated by 2.5.0 https://github.com/kyuridenamida/atcoder-tools
int main() {
    long long N;
    N = input();
    long long M;
    M = input();
    std::vector<std::string> A(N);
    for(int i = 0 ; i < N ; i++){
        A[i] = static_cast<std::string>(input());
    }
    std::vector<std::string> B(M);
    for(int i = 0 ; i < M ; i++){
        B[i] = static_cast<std::string>(input());
    }
    solve(N, M, std::move(A), std::move(B));
    return 0;
}

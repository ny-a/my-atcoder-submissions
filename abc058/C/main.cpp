#include <algorithm>
#include <atcoder/all>
#include <bitset>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <deque>
#include <fstream>
#include <functional>
#include <iostream>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>

struct input {
    template <class T> operator T() {
        T t;
        std::cin >> t;
        return t;
    }
};

void solve(long long n, std::vector<std::string> S) {
    std::vector<std::vector<int>> charCount(26, std::vector<int>(n, 0));

    for (int i = 0; i < n; i++) {
        for (char const& c: S[i]) {
            int charIndex = c - 'a';
            charCount[charIndex][i]++;
        }
    }

    std::string answer = "";

    for (int charIndex = 0; charIndex < 26; charIndex++) {
        char c = 'a' + charIndex;
        int charCountMin = *std::min_element(charCount[charIndex].begin(), charCount[charIndex].end());
        for (int j = 0; j < charCountMin; j++) {
            answer.push_back(c);
        }
    }

    std::cout << answer << std::endl;
}

// Generated by 2.5.0 https://github.com/kyuridenamida/atcoder-tools
int main() {
    long long n;
    n = input();
    std::vector<std::string> S(n);
    for(int i = 0 ; i < n ; i++){
        S[i] = static_cast<std::string>(input());
    }
    solve(n, std::move(S));
    return 0;
}

#include <algorithm>
#include <atcoder/all>
#include <bitset>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <deque>
#include <fstream>
#include <functional>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>

struct input {
    template <class T> operator T() {
        T t;
        std::cin >> t;
        return t;
    }
};

bool is_valid(long long N, std::vector<bool> is_ok) {
    long long price = N;
    while (0 < price) {
        int digit = price % 10;
        if (!is_ok[digit]) {
            return false;
        }
        price /= 10;
    }
    return true;
}

void solve(long long N, std::vector<long long> D) {
    std::vector<int> next_ok_digits(10, -1);
    std::vector<bool> is_ok(10, false);
    int first_ok_digit = 9;

    int previous_value = -1;
    for (int i = 9; 0 <= i; i--) {
        long long& last_ng = D.back();
        if (i == last_ng) {
            next_ok_digits[i] = previous_value;
            is_ok[i] = false;
            D.pop_back();
        } else {
            next_ok_digits[i] = i;
            is_ok[i] = true;
            previous_value = i;
            first_ok_digit = i;
        }
    }

    std::string answer = "";
    long long price = N;
    while (0 < price) {
        int digit = price % 10;
        int ok_digit = next_ok_digits[digit];
        long long left = price / 10;

        if (ok_digit != -1 && is_valid(left, is_ok)) {
            answer.push_back('0' + ok_digit);
            price = left;
        } else {
            answer.push_back('0' + first_ok_digit);
            price = left + 1;
        }
    }

    std::reverse(answer.begin(), answer.end());

    std::cout << answer << std::endl;
}

// Generated by 2.5.0 https://github.com/kyuridenamida/atcoder-tools
int main() {
    long long N;
    N = input();
    long long K;
    K = input();
    std::vector<long long> D(K);
    for(int i = 0 ; i < K ; i++){
        D[i] = input();
    }
    solve(N, std::move(D));
    return 0;
}

#include <algorithm>
#include <atcoder/all>
#include <bitset>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <deque>
#include <fstream>
#include <functional>
#include <iostream>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>

struct input {
    template <class T> operator T() {
        T t;
        std::cin >> t;
        return t;
    }
};

void solve(long long H, long long W, std::vector<std::string> S) {

    for (int i = 0; i < H; i++) {
        for (int j = 0; j < W; j++) {
            if (S[i][j] != '.') {
                continue;
            }

            int count = 0;
            if (j != 0) {
                if (i != 0 && S[i-1][j-1] == '#') {
                    count++;
                }
                if (S[i][j-1] == '#') {
                    count++;
                }
                if (i != H - 1 && S[i+1][j-1] == '#') {
                    count++;
                }
            }
            if (i != 0 && S[i-1][j] == '#') {
                count++;
            }
            if (i != H - 1 && S[i+1][j] == '#') {
                count++;
            }
            if (j != W - 1) {
                if (i != 0 && S[i-1][j+1] == '#') {
                    count++;
                }
                if (S[i][j+1] == '#') {
                    count++;
                }
                if (i != H - 1 && S[i+1][j+1] == '#') {
                    count++;
                }
            }
            S[i][j] = '0' + count;
        }
        std::cout << S[i] << std::endl;
    }
}

// Generated by 2.5.0 https://github.com/kyuridenamida/atcoder-tools
int main() {
    long long H;
    H = input();
    long long W;
    W = input();
    std::vector<std::string> S(H);
    for(int i = 0 ; i < H ; i++){
        S[i] = static_cast<std::string>(input());
    }
    solve(H, W, std::move(S));
    return 0;
}

#include <algorithm>
#include <atcoder/all>
#include <bitset>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <deque>
#include <fstream>
#include <functional>
#include <iostream>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>

struct input {
    template <class T> operator T() {
        T t;
        std::cin >> t;
        return t;
    }
};

std::set<long long> factors;

void prime_factorize(long long N) {
    for (long long a = 2; a * a <= N; ++a) {
        if (N % a != 0) continue;
        long long ex = 0; // 指数

        // 割れる限り割り続ける
        while (N % a == 0) {
            ++ex;
            N /= a;
        }

        // その結果を push
        factors.emplace(a);
    }

    // 最後に残った数について
    if (N != 1) factors.emplace(N);
}

void solve(long long N, long long M, std::vector<long long> A) {
    std::vector<bool> integers(M, true);

    for (int i = 0; i < N; i++) {
        int a = A[i];
        prime_factorize(a);
    }

    for (auto const& a: factors) {
        if (a == 1) {
            // do nothing
        } else {
            for (int val = a; val <= M; val += a) {
                integers[val - 1] = false;
            }
        }
    }

    long long answers = std::count(integers.begin(), integers.end(), true);
    std::cout << answers << "\n";

    for (int i = 0; i < M; i++) {
        if (integers[i]) {
            std::cout << i + 1 << "\n";
        }
    }
}

// Generated by 2.5.0 https://github.com/kyuridenamida/atcoder-tools
int main() {
    long long N;
    N = input();
    long long M;
    M = input();
    std::vector<long long> A(N);
    for(int i = 0 ; i < N ; i++){
        A[i] = input();
    }
    solve(N, M, std::move(A));
    return 0;
}

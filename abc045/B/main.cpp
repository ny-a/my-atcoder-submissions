#include <algorithm>
#include <atcoder/all>
#include <bitset>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <deque>
#include <fstream>
#include <functional>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>

struct input {
    template <class T> operator T() {
        T t;
        std::cin >> t;
        return t;
    }
};

void solve(std::string S_A, std::string S_B, std::string S_C) {
    std::vector<std::vector<int>> deck(3, std::vector(0, 0));
    deck[0].reserve(S_A.length());
    for (int i = S_A.length() - 1; 0 <= i ; i--) {
        deck[0].emplace_back(S_A[i] - 'a');
    }
    deck[0].reserve(S_B.length());
    for (int i = S_B.length() - 1; 0 <= i ; i--) {
        deck[1].emplace_back(S_B[i] - 'a');
    }
    deck[0].reserve(S_C.length());
    for (int i = S_C.length() - 1; 0 <= i ; i--) {
        deck[2].emplace_back(S_C[i] - 'a');
    }

    int turn = 0;

    while (true) {
        if (deck[turn].size() == 0) {
            break;
        }
        int& next_turn = deck[turn].back();
        deck[turn].pop_back();
        turn = next_turn;
    }

    std::cout << (static_cast<char>(turn + 'A')) << std::endl;
}

// Generated by 2.5.0 https://github.com/kyuridenamida/atcoder-tools
int main() {
    std::string S_A = input();
    std::string S_B = input();
    std::string S_C = input();
    solve(S_A, S_B, S_C);
    return 0;
}

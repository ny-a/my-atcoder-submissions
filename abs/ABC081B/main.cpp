#include <algorithm>
#include <bitset>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <deque>
#include <fstream>
#include <functional>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>

struct input {
    template <class T> operator T() {
        T t;
        std::cin >> t;
        return t;
    }
};

void solve(long long N, std::vector<long long> A) {
    std::vector<long long> results(N);
    std::fill(results.begin(), results.end(), 0LL);
    for (int i = 0; i < N; i++) {
        long long &a = A[i];
        long long &result = results[i];
        while ((a & 1LL) == 0LL) {
            a >>= 1LL;
            result += 1LL;
        }
    }
    long long min = *std::min_element(results.begin(), results.end());
    std::cout << min << "\n";
}

// Generated by 2.3.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can
// remove this line by using your custom template)
int main() {
    long long N = input();
    std::vector<long long> A(N);
    for (auto&& a : A) {
        a = input();
    }
    solve(N, A);
    return 0;
}

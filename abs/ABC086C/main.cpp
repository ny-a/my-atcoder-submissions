#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <bitset>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>
#include <cassert>
using namespace std;

const string YES = "Yes";
const string NO = "No";

void solve(long long N, std::vector<long long> t, std::vector<long long> x, std::vector<long long> y){
    long long currentTime = 0;
    long long currentX = 0;
    long long currentY = 0;
    bool possible = true;
    for (long long i = 0; possible && i < N; i++) {
        long long nextT = t[i];
        long long nextX = x[i];
        long long nextY = y[i];

        long long distance = std::abs(currentX - nextX) + std::abs(currentY - nextY);
        long long moveTime = nextT - currentTime;

        currentX = nextX;
        currentY = nextY;
        currentTime = nextT;

        if (moveTime < distance || (moveTime - distance) % 2 == 1) {
            possible = false;
        }
    }

    std::cout << (possible ? YES : NO) << std::endl;
}

// Generated by 2.3.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
int main(){
    long long N;
    std::scanf("%lld", &N);
    std::vector<long long> t(N);
    std::vector<long long> x(N);
    std::vector<long long> y(N);
    for(int i = 0 ; i < N ; i++){
        std::scanf("%lld", &t[i]);
        std::scanf("%lld", &x[i]);
        std::scanf("%lld", &y[i]);
    }
    solve(N, std::move(t), std::move(x), std::move(y));
    return 0;
}

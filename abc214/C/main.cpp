#include <algorithm>
#include <atcoder/all>
#include <bitset>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <deque>
#include <fstream>
#include <functional>
#include <iostream>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>

struct input {
    template <class T> operator T() {
        T t;
        std::cin >> t;
        return t;
    }
};

using mint = atcoder::modint;

void solve(long long N, std::vector<long long> S, std::vector<long long> T) {
    std::vector<long long> shortest(T);
    int shortest_index = std::distance(T.begin(), std::min_element(T.begin(), T.end()));
    mint::set_mod(N);

    bool is_changed = true;

    while (is_changed) {
        is_changed = false;
        for (int i = 0; i < N; i++) {
            mint current_index(i + shortest_index);
            mint next_index(i + shortest_index + 1);

            if (shortest[current_index.val()] + S[current_index.val()] < shortest[next_index.val()] ) {
                is_changed = true;
                shortest[next_index.val()] = shortest[current_index.val()] + S[current_index.val()];
            }
        }
    }

    for (int i = 0; i < N; i++) {
        std::cout << shortest[i] << "\n";
    }
}

// Generated by 2.5.0 https://github.com/kyuridenamida/atcoder-tools
int main() {
    long long N;
    N = input();
    std::vector<long long> S(N);
    for(int i = 0 ; i < N ; i++){
        S[i] = input();
    }
    std::vector<long long> T(N);
    for(int i = 0 ; i < N ; i++){
        T[i] = input();
    }
    solve(N, std::move(S), std::move(T));
    return 0;
}

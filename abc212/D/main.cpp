#include <algorithm>
#include <atcoder/all>
#include <bitset>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <deque>
#include <fstream>
#include <functional>
#include <iostream>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>

struct input {
    template <class T> operator T() {
        T t;
        std::cin >> t;
        return t;
    }
};

void solve(int Q, std::vector<int> P, std::vector<long long> X) {
    std::priority_queue<long long, std::vector<long long>,
                        std::greater<long long> >
        queue;

    long long p2value = 0LL;

    for (int i = 0; i < Q; i++) {
        int p = P[i];
        if (p == 1) {
            queue.emplace(X[i] - p2value);
        }
        if (p == 2) {
            p2value += X[i];
        }
        if (p == 3) {
            std::cout << queue.top() + p2value << "\n";
            queue.pop();
        }
    }
}

// Generated by 2.5.0 https://github.com/kyuridenamida/atcoder-tools
int main() {
    // Failed to predict input format
    int Q = input();
    std::vector<int> P(Q, 0);
    std::vector<long long> X(Q, 0LL);
    for (int i = 0; i < Q; i++) {
        P[i] = input();
        if (P[i] != 3) {
            X[i] = input();
        }
    }
    solve(Q, P, X);
    return 0;
}
